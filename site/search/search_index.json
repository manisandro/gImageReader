{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"About gImageReader is a frontend to tesseract-ocr written in C++. How it looks Features Import PDF documents and images from disk, scanning devices, clipboard and screenshots Process multiple images and documents in one go Manual or automatic recognition area definition Recognize to plain text or to hOCR documents Recognized text displayed directly next to the image Post-process the recognized text, including spellchecking Generate PDF documents from hOCR documents","title":"About"},{"location":"index.html#about","text":"gImageReader is a frontend to tesseract-ocr written in C++.","title":"About"},{"location":"index.html#how-it-looks","text":"","title":"How it looks"},{"location":"index.html#features","text":"Import PDF documents and images from disk, scanning devices, clipboard and screenshots Process multiple images and documents in one go Manual or automatic recognition area definition Recognize to plain text or to hOCR documents Recognized text displayed directly next to the image Post-process the recognized text, including spellchecking Generate PDF documents from hOCR documents","title":"Features"},{"location":"1_Installation.html","text":"Installation For OS Windows : Download from the releases page Fedora : Available from the official repositories Debian : Available from the official repositories Ubuntu : Available from ppa:sandromani/gimagereader OpenSUSE : Available from OpenSUSE Build Service ArchLinux : Available from the community repositories Source : Download from the releases page Compile If you would like to compile gImageReader from source, follow these steps .","title":"Installation"},{"location":"1_Installation.html#installation","text":"","title":"Installation"},{"location":"1_Installation.html#for-os","text":"Windows : Download from the releases page Fedora : Available from the official repositories Debian : Available from the official repositories Ubuntu : Available from ppa:sandromani/gimagereader OpenSUSE : Available from OpenSUSE Build Service ArchLinux : Available from the community repositories Source : Download from the releases page","title":"For OS"},{"location":"1_Installation.html#compile","text":"If you would like to compile gImageReader from source, follow these steps .","title":"Compile"},{"location":"2_Usage.html","text":"Usage Opening and importing images Images can be opened/imported from the sources pane , which is activated by clicking on the top-left button in the main toolbar . To open an existing image or PDF document, click on the open button in the images tab . To open all images in one directory, click the open directory button in the images tab . To capture a screenshot . To paste image data from the clipboard . To open a recently opened file, click on the arrow next to the open button . You can manage the list of opened images with the buttons next to the open button . Temporary files (such as screenshots and clipboard data) are automatically deleted when the program exists. To acquire an image from a scanning device, click on the acquire tab in the sources pane and then . Viewing and adjusting images Use the buttons in the main toolbar to zoom in and out as well as rotate the image by an arbitrary angle . Zooming can also be performed by scrolling on the image with the CTRL key pressed. Basic image manipulation tools are provided in the image controls toolbar , which is activated by clicking on the image controls button in the main toolbar . The provided tools currently allow brightness and contrast adjustments as well as adjusting the image resolution (through interpolation). Multiple images can be selected, which allowes the user to process multiple images in one go (see below). Preparing for recognition To perform OCR on an image, the user needs to specify: The input images (e.g. images to recognize), The recognition mode (e.g. plain text vs hOCR, PDF ) The recognition language(s) . The input images correspond to the selected entries in the images tab in the sources pane . If multiple images are selected, the program will treat the set of images as multipage document and ask the user which pages to process when recognition is started. The recognition mode can be selected in the OCR mode combobox in the main toolbar: The plain text mode makes the OCR engine extract only the plain text, without formatting and layout information. The hOCR, PDF mode makes the OCR engine return the recognized text as a hOCR html document, which includes formatting and layout information for the recognized page. hOCR is a standard format for storing recognition results and can be used to interoperate with other application supporting this standard. gImageReader can process hOCR documents further to generate a PDF document for the recognition result. The recognition language can be selected from the drop-down menu of the recognize button in the main toolbar . If a spelling dictionary is installed for a tesseract language definition, it is possible to choose between available regional flavors of the language. This will only affect the language for spell-checking the recognized text. Unrecognized tesseract language definitions will appear by their filename prefix, one can however teach the program to recognize such files by defining appropriate rules in the program configuration (see below). Multiple recognition languages can be specified at once from the Multilingual submenu of the drop-down menu. The installed tesseract language definitions can be managed from the Manage languages... menu entry in the drop-down menu of the recognize button , see also Installation of tesseract language definitions . Recognizing and post-processing - plain text Areas to be recognized can be selected by dragging (left click + mouse move) a rectangular area around portions of the image. Multiple selections are possible by pressing the CTRL key while selecting. Alternatively, the automatic layout detection button , accessible from the main toolbar will attempt to automatically define appropriate recognition areas, as well as adjust the rotation of the image if necessary. Selections can be deleted and reordered via the context menu which appears when right-clicking on them. It is also possible to resize existing selections by dragging the corners of the selection rectangle. The selected portions of the image (or the entire image, if no selections are defined) can be recognized by pressing on the recognize button in the main toolbar . Alternatively, individual areas can be recognized by right-clicking a selection. From the selection context menu, it is also possible to redirect the recognized text to the clipboard, instead of the output pane. If multiple pages are selected for recognition, the program allows the user to choose between either recognizing the full resp. manually selected area for each individual page, or performing a page-layout analysis on each page to automatically detect appropriate recognition areas. Recognized text will appear in the output pane (unless the text was redirected to the clipboard), which is shown automatically as soon as some text was recognized. If a spelling dictionary for the recognition language is available, automatic spell-checking will be enabled for the outputted text. The used spelling dictionary can be changed either from the language menu next to the recognize button , or from the menu which appears when right-clicking in the text area. When additional text is recognized, it will either get appended, inserted at cursor position, or replace the previous content of the text buffer, depending on the mode selected in the append mode menu , which can be found in the output pane toolbar . Other post-processing tools include stripping line breaks, collapsing spaces and more (available from the second button in the output pane toolbar ), as well as searching and replacing text. A list of search and replace rules can be defined by clicking on the Find and replace button in the output pane toolbar and then clicking on the Substitutions button. Changes to the text buffer can be undone and redone by clicking on the appropriate buttons in the output pane toolbar . The contents of the text buffer can be saved to a file by clicking on the save button in the output pane toolbar . Recognizing and post-processing - hOCR, PDF In hOCR mode, always the entire page of the selected source(s) is recognized. The recognition result is presented in the output pane as a tree-structure, divided in pages, paragraphs, textlines, words and graphics. When an entry in the tree-structure is selected, the corresponding area is highlighted in the image. Additionally, formatting and layout properties of the entry are shown in the Properties tab below the document tree. The raw hOCR source is visible in the Source tab below the document tree. The word text in the document tree can be edited by double-clicking the respective word entry. If a word is mis-spelled, it will be rendered red. Right-clicking a word in the document tree will show a menu with spelling suggestions. Properties for a selected entry can be modified by double clicking the desired property value in the Properties tab. Interesting actions for text entries are tweaking the bounding area, changing the language and modifying the font size. The language property also definies the spelling language used to check the respective word. The bounding area can also be edited by resizing the selection rectangle in the canvas. Adjacent word items can be merged by rightclicking the respective selected items. Arbitrary items can be removed from the document via right-click on the respective item. New graphic areas can be defined by selecting the Add graphic region entry of the context menu of the respective page item and drawing a rectangle on the canvas. The document tree can be saved as a hOCR HTML document via the Save as hOCR text button in the output pane toolbar . Existing documents can be imported via the Open hOCR file button in the output pane toolbar . PDF files can be generated from the PDF export menu in the output pane toolbar. Two modes are available: PDF will generate a reconstructed PDF the same layout and graphics/pictures as the source document. PDF with invisible text overlay will generate a PDF with the unmodified source image as background and invisible (but selectable) text overlaid above the respective source text in the image. This export mode is useful for generating a document which is visually identical to the input, but with searchable and selectable text. When exporting to PDF, the user is prompted for the font family to use, whether to honour the font sizes detected by the OCR engine, and whether to attempt to homogenize the text line spacing. Also, the user can select the color format, resolution and compression method to use for images in the PDF document to control the size of the generated output.","title":"Usage"},{"location":"2_Usage.html#usage","text":"","title":"Usage"},{"location":"2_Usage.html#opening-and-importing-images","text":"Images can be opened/imported from the sources pane , which is activated by clicking on the top-left button in the main toolbar . To open an existing image or PDF document, click on the open button in the images tab . To open all images in one directory, click the open directory button in the images tab . To capture a screenshot . To paste image data from the clipboard . To open a recently opened file, click on the arrow next to the open button . You can manage the list of opened images with the buttons next to the open button . Temporary files (such as screenshots and clipboard data) are automatically deleted when the program exists. To acquire an image from a scanning device, click on the acquire tab in the sources pane and then .","title":"Opening and importing images"},{"location":"2_Usage.html#viewing-and-adjusting-images","text":"Use the buttons in the main toolbar to zoom in and out as well as rotate the image by an arbitrary angle . Zooming can also be performed by scrolling on the image with the CTRL key pressed. Basic image manipulation tools are provided in the image controls toolbar , which is activated by clicking on the image controls button in the main toolbar . The provided tools currently allow brightness and contrast adjustments as well as adjusting the image resolution (through interpolation). Multiple images can be selected, which allowes the user to process multiple images in one go (see below).","title":"Viewing and adjusting images"},{"location":"2_Usage.html#preparing-for-recognition","text":"To perform OCR on an image, the user needs to specify: The input images (e.g. images to recognize), The recognition mode (e.g. plain text vs hOCR, PDF ) The recognition language(s) . The input images correspond to the selected entries in the images tab in the sources pane . If multiple images are selected, the program will treat the set of images as multipage document and ask the user which pages to process when recognition is started. The recognition mode can be selected in the OCR mode combobox in the main toolbar: The plain text mode makes the OCR engine extract only the plain text, without formatting and layout information. The hOCR, PDF mode makes the OCR engine return the recognized text as a hOCR html document, which includes formatting and layout information for the recognized page. hOCR is a standard format for storing recognition results and can be used to interoperate with other application supporting this standard. gImageReader can process hOCR documents further to generate a PDF document for the recognition result. The recognition language can be selected from the drop-down menu of the recognize button in the main toolbar . If a spelling dictionary is installed for a tesseract language definition, it is possible to choose between available regional flavors of the language. This will only affect the language for spell-checking the recognized text. Unrecognized tesseract language definitions will appear by their filename prefix, one can however teach the program to recognize such files by defining appropriate rules in the program configuration (see below). Multiple recognition languages can be specified at once from the Multilingual submenu of the drop-down menu. The installed tesseract language definitions can be managed from the Manage languages... menu entry in the drop-down menu of the recognize button , see also Installation of tesseract language definitions .","title":"Preparing for recognition"},{"location":"2_Usage.html#recognizing-and-post-processing-plain-text","text":"Areas to be recognized can be selected by dragging (left click + mouse move) a rectangular area around portions of the image. Multiple selections are possible by pressing the CTRL key while selecting. Alternatively, the automatic layout detection button , accessible from the main toolbar will attempt to automatically define appropriate recognition areas, as well as adjust the rotation of the image if necessary. Selections can be deleted and reordered via the context menu which appears when right-clicking on them. It is also possible to resize existing selections by dragging the corners of the selection rectangle. The selected portions of the image (or the entire image, if no selections are defined) can be recognized by pressing on the recognize button in the main toolbar . Alternatively, individual areas can be recognized by right-clicking a selection. From the selection context menu, it is also possible to redirect the recognized text to the clipboard, instead of the output pane. If multiple pages are selected for recognition, the program allows the user to choose between either recognizing the full resp. manually selected area for each individual page, or performing a page-layout analysis on each page to automatically detect appropriate recognition areas. Recognized text will appear in the output pane (unless the text was redirected to the clipboard), which is shown automatically as soon as some text was recognized. If a spelling dictionary for the recognition language is available, automatic spell-checking will be enabled for the outputted text. The used spelling dictionary can be changed either from the language menu next to the recognize button , or from the menu which appears when right-clicking in the text area. When additional text is recognized, it will either get appended, inserted at cursor position, or replace the previous content of the text buffer, depending on the mode selected in the append mode menu , which can be found in the output pane toolbar . Other post-processing tools include stripping line breaks, collapsing spaces and more (available from the second button in the output pane toolbar ), as well as searching and replacing text. A list of search and replace rules can be defined by clicking on the Find and replace button in the output pane toolbar and then clicking on the Substitutions button. Changes to the text buffer can be undone and redone by clicking on the appropriate buttons in the output pane toolbar . The contents of the text buffer can be saved to a file by clicking on the save button in the output pane toolbar .","title":"Recognizing and post-processing - plain text"},{"location":"2_Usage.html#recognizing-and-post-processing-hocr-pdf","text":"In hOCR mode, always the entire page of the selected source(s) is recognized. The recognition result is presented in the output pane as a tree-structure, divided in pages, paragraphs, textlines, words and graphics. When an entry in the tree-structure is selected, the corresponding area is highlighted in the image. Additionally, formatting and layout properties of the entry are shown in the Properties tab below the document tree. The raw hOCR source is visible in the Source tab below the document tree. The word text in the document tree can be edited by double-clicking the respective word entry. If a word is mis-spelled, it will be rendered red. Right-clicking a word in the document tree will show a menu with spelling suggestions. Properties for a selected entry can be modified by double clicking the desired property value in the Properties tab. Interesting actions for text entries are tweaking the bounding area, changing the language and modifying the font size. The language property also definies the spelling language used to check the respective word. The bounding area can also be edited by resizing the selection rectangle in the canvas. Adjacent word items can be merged by rightclicking the respective selected items. Arbitrary items can be removed from the document via right-click on the respective item. New graphic areas can be defined by selecting the Add graphic region entry of the context menu of the respective page item and drawing a rectangle on the canvas. The document tree can be saved as a hOCR HTML document via the Save as hOCR text button in the output pane toolbar . Existing documents can be imported via the Open hOCR file button in the output pane toolbar . PDF files can be generated from the PDF export menu in the output pane toolbar. Two modes are available: PDF will generate a reconstructed PDF the same layout and graphics/pictures as the source document. PDF with invisible text overlay will generate a PDF with the unmodified source image as background and invisible (but selectable) text overlaid above the respective source text in the image. This export mode is useful for generating a document which is visually identical to the input, but with searchable and selectable text. When exporting to PDF, the user is prompted for the font family to use, whether to honour the font sizes detected by the OCR engine, and whether to attempt to homogenize the text line spacing. Also, the user can select the color format, resolution and compression method to use for images in the PDF document to control the size of the generated output.","title":"Recognizing and post-processing - hOCR, PDF"},{"location":"3_Add_language.html","text":"Install Tesseract language definitions The Tessdata manager , available from the drop-down menu of the recognize button in the main toolbar allows the user to manage the available recognition languages. To install the languages manually: On Linux , it's sufficient to install the package corresponding to the language definition one wants to install via the package management application (the packages may be called something like tesseract-langpack- ). On Windows, first, in the gImageReader about dialog, check which version of tesseract is used. If using tesseract 4.x, go to https://github.com/tesseract-ocr/tessdata_fast. If using tesseract 3.x or older, go to https://github.com/tesseract-ocr/tessdata. Then, in the branch selection button, under tags, select the version which is less or equal the tesseract version in use. Then download the desired language definitions (*.traineddata along with any supplementary files which certain languages need) and save them to Start\u2192All Programs\u2192gImageReader\u2192Tesseract language definitions. To re-detect the available languages, one can restart the program, or select Redetect Languages from the application menu .","title":"Install Tesseract language definitions"},{"location":"3_Add_language.html#install-tesseract-language-definitions","text":"The Tessdata manager , available from the drop-down menu of the recognize button in the main toolbar allows the user to manage the available recognition languages. To install the languages manually: On Linux , it's sufficient to install the package corresponding to the language definition one wants to install via the package management application (the packages may be called something like tesseract-langpack- ). On Windows, first, in the gImageReader about dialog, check which version of tesseract is used. If using tesseract 4.x, go to https://github.com/tesseract-ocr/tessdata_fast. If using tesseract 3.x or older, go to https://github.com/tesseract-ocr/tessdata. Then, in the branch selection button, under tags, select the version which is less or equal the tesseract version in use. Then download the desired language definitions (*.traineddata along with any supplementary files which certain languages need) and save them to Start\u2192All Programs\u2192gImageReader\u2192Tesseract language definitions. To re-detect the available languages, one can restart the program, or select Redetect Languages from the application menu .","title":"Install Tesseract language definitions"},{"location":"4_Add_dictionary.html","text":"Install Spelling dictionaries On Linux , if your distribution supports PackageKit, the program will offer to automatically install missing dictionaries when necessary. If automatic installation does not work for some reason, you can install the spelling dictionaries from the package management application (the packages may be called something like hunspell- ). On Windows , the program will attempt to automatically download the desired spelling dictionary from http://cgit.freedesktop.org/libreoffice/dictionaries/tree . Dictionaries can also be installed manually: for a desired language (i.e. it_IT ), download the *.dic and *.aff files and place them in Start\u2192All Programs\u2192gImageReader\u2192Spelling dictionaries .","title":"Install Spelling dictionaries"},{"location":"4_Add_dictionary.html#install-spelling-dictionaries","text":"On Linux , if your distribution supports PackageKit, the program will offer to automatically install missing dictionaries when necessary. If automatic installation does not work for some reason, you can install the spelling dictionaries from the package management application (the packages may be called something like hunspell- ). On Windows , the program will attempt to automatically download the desired spelling dictionary from http://cgit.freedesktop.org/libreoffice/dictionaries/tree . Dictionaries can also be installed manually: for a desired language (i.e. it_IT ), download the *.dic and *.aff files and place them in Start\u2192All Programs\u2192gImageReader\u2192Spelling dictionaries .","title":"Install Spelling dictionaries"},{"location":"5_Options.html","text":"Program options The program options can be accessed from the application menu , which opens when clicking the right-most button of the main toolbar . When running the application within the Gnome 3 desktop environment, the application menu is part of the top bar of the desktop shell. Options allow setting the font of the output pane, as well as determining whether the application will notify about missing spelling dictionaries and new program versions. When running the Gtk+ interface, the options also allow setting the orientation of the output pane (if vertical, it will occupy the right portion of the application, if horizontal, it will occupy the lower portion). When running the Qt interface, the position of the output pane can be freely moved around by dragging on the title bar of the output pane. The language data location setting allows to control whether tesseract language definitions and spelling dictionaries are saved in system-wide (i.e. %ProgramFiles% under Windows or typically below /usr on Linux) or user-local (i.e. below the current user's home directory) directories. This is useful if the user does not have writing privileges in system-wide locations. Additionally, one can define new rules to match tesseract language definitions to a language (unfortunately, the tesseract language definitions do not include this information). The list of predefined rules can be seen in the Predefined language definitions section. Additional definitions can be added clicking on the Add button below. The rules for a language definition, which consists of three fields, are as follows: Filename prefix : The filename of tesseract language data files is of the format .traineddata , i.e. for English, the file is called eng.traineddata and the prefix is eng . ISO code : This is the ISO 639-1 language code (i.e. en ), optionally combined by an underscore with the ISO 3166-2 country code (i.e. en_US ). This information is necessary to match spelling dictionaries to the language. The choice of the actual country code is not strictly relevant, but it is necessary for the automatic installation of spelling dictionaries to find a relevant package of dictionaries. This code can also be made up if no appropriate choices exist, the only result being that no relevant spelling-dictionaries will be matched with the language. Native name : The native name of the language simply determines the label of the entry for the language in the language menu .","title":"Program options"},{"location":"5_Options.html#program-options","text":"The program options can be accessed from the application menu , which opens when clicking the right-most button of the main toolbar . When running the application within the Gnome 3 desktop environment, the application menu is part of the top bar of the desktop shell. Options allow setting the font of the output pane, as well as determining whether the application will notify about missing spelling dictionaries and new program versions. When running the Gtk+ interface, the options also allow setting the orientation of the output pane (if vertical, it will occupy the right portion of the application, if horizontal, it will occupy the lower portion). When running the Qt interface, the position of the output pane can be freely moved around by dragging on the title bar of the output pane. The language data location setting allows to control whether tesseract language definitions and spelling dictionaries are saved in system-wide (i.e. %ProgramFiles% under Windows or typically below /usr on Linux) or user-local (i.e. below the current user's home directory) directories. This is useful if the user does not have writing privileges in system-wide locations. Additionally, one can define new rules to match tesseract language definitions to a language (unfortunately, the tesseract language definitions do not include this information). The list of predefined rules can be seen in the Predefined language definitions section. Additional definitions can be added clicking on the Add button below. The rules for a language definition, which consists of three fields, are as follows: Filename prefix : The filename of tesseract language data files is of the format .traineddata , i.e. for English, the file is called eng.traineddata and the prefix is eng . ISO code : This is the ISO 639-1 language code (i.e. en ), optionally combined by an underscore with the ISO 3166-2 country code (i.e. en_US ). This information is necessary to match spelling dictionaries to the language. The choice of the actual country code is not strictly relevant, but it is necessary for the automatic installation of spelling dictionaries to find a relevant package of dictionaries. This code can also be made up if no appropriate choices exist, the only result being that no relevant spelling-dictionaries will be matched with the language. Native name : The native name of the language simply determines the label of the entry for the language in the language menu .","title":"Program options"},{"location":"6_Contribute.html","text":"Contributing For suggestions and contributions of any kind, please file tickets and/or pull-requests on the GitHub project page , or contact me at manisandro@gmail.com . I'd especially appreciate translations - here are the main steps for creating a translation: A) gImageReader translations are hosted on weblate and are periodically merged into master. or B): Download the latest source archive . Enter the po folder. To create a new translation, copy the gimagereader.pot file to <language>.po (i.e. de.po for German). To edit an existing translation, simply pick the corresponding file. Translate the strings in <language>.po . Send the po file to manisandro@gmail.com . Thanks! Debugging and support If you find an issue or have a suggestion, please file a ticket to the gImageReader issue tracker , or contact me directly at manisandro@gmail.com . Be sure to also consult the FAQ . If you are experiencing crashes or hangs, please also try to include the following information in the ticket/email: If the crash handler appears, include the backtrace which is shown there. To make sure that the backtrace is complete, if you are running the application under Linux, make sure that the gdb debugger as well as the debugging symbols are installed if your distribution provides them. The package containing the debugging symbols is usually called -debuginfo or -dbg . If you are running the application under Windows, some debugging symbols are installed by default. If you are running under Windows, include the %ProgramFiles%\\gImageReader\\gimagereader.log and %ProgramFiles%\\gImageReader\\twain.log log files. If you are running under Linux, run the application from a terminal and include any output which appears on the terminal. Try to describe as best as you can what you were doing and whether the problem is reproducible.","title":"Contributing"},{"location":"6_Contribute.html#contributing","text":"For suggestions and contributions of any kind, please file tickets and/or pull-requests on the GitHub project page , or contact me at manisandro@gmail.com . I'd especially appreciate translations - here are the main steps for creating a translation: A) gImageReader translations are hosted on weblate and are periodically merged into master. or B): Download the latest source archive . Enter the po folder. To create a new translation, copy the gimagereader.pot file to <language>.po (i.e. de.po for German). To edit an existing translation, simply pick the corresponding file. Translate the strings in <language>.po . Send the po file to manisandro@gmail.com . Thanks!","title":"Contributing"},{"location":"6_Contribute.html#debugging-and-support","text":"If you find an issue or have a suggestion, please file a ticket to the gImageReader issue tracker , or contact me directly at manisandro@gmail.com . Be sure to also consult the FAQ . If you are experiencing crashes or hangs, please also try to include the following information in the ticket/email: If the crash handler appears, include the backtrace which is shown there. To make sure that the backtrace is complete, if you are running the application under Linux, make sure that the gdb debugger as well as the debugging symbols are installed if your distribution provides them. The package containing the debugging symbols is usually called -debuginfo or -dbg . If you are running the application under Windows, some debugging symbols are installed by default. If you are running under Windows, include the %ProgramFiles%\\gImageReader\\gimagereader.log and %ProgramFiles%\\gImageReader\\twain.log log files. If you are running under Linux, run the application from a terminal and include any output which appears on the terminal. Try to describe as best as you can what you were doing and whether the problem is reproducible.","title":"Debugging and support"},{"location":"7_Translate.html","text":"Translate","title":"Translate"},{"location":"7_Translate.html#translate","text":"","title":"Translate"},{"location":"8_Issue_tracker.html","text":"Issue tracker","title":"Issue tracker"},{"location":"8_Issue_tracker.html#issue-tracker","text":"","title":"Issue tracker"},{"location":"FAQ.html","text":"","title":"FAQ"},{"location":"News.html","text":"News","title":"News"},{"location":"News.html#news","text":"","title":"News"}]}